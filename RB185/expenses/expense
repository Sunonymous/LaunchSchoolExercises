#! /usr/bin/env ruby

# frozen_string_literal: true

# TODO: move validation constants into validation class

require 'pg'

# Constants
GREETING = "An expense tracking program.\n\n"
ARGLESS_COMMANDS = %w[clear list].freeze
ARGFUL_COMMANDS  = %w[add delete search].freeze
CMD_INFO = {
  'add'    => '<AMOUNT> <MEMO> <DATE> - record a new expense. <DATE> is optional. If <DATE> is not included, defaults to current day.',
  'clear'  => '- delete all expenses',
  'list'   => '- list all expenses',
  'delete' => '<NUMBER> - remove expenses with id <NUMBER>',
  'search' => '<QUERY> - list expenses with <QUERY> in the memo'
}.freeze
LOWEST_EXPENSE = 0.01
MAX_EXPENSE = 9999.99
DATE_REGX = /\A\d{4}-\d{2}-\d{2}\z/
ARG_ADVICE = {
  'amount' => "Amounts must be rounded to two decimal places (if not a whole number), and be between #{LOWEST_EXPENSE} and #{MAX_EXPENSE}.",
  'args'   => 'Incorrect number of arguments provided. Please review the command format.',
  'date'   => 'Dates are formatted as YYYY-MM-DD and must be equal to the current date or earlier. Please include only numbers and hyphens.',
  'memo'   => 'A memo must be included for an expense to be valid. If your memo includes more than one word, enclose it between "".',
  'query'  => 'Include a query with your search. All expenses containing the query will be returned.'
}

class CLI
  def initialize(params)
    @v = Validator.new
    if params.empty? or !@v.valid_command?(params.first)
      ARGV.clear
      abort_action
    else
      @db = ExpenseData.new
      @command = params.shift
      @validation_needed = ARGFUL_COMMANDS.include?(@command)
      params.empty? && @validation_needed ? abort_action('args') : process_args(params)
    end
  end

  def process_args(params)
    # command was shifted out of params
    results = @validation_needed ? @v.method("valid_#{@command}".to_sym).call(params) : [true]
    if results.size == 1 and results.first == true # second check isn't really necessary, but... just in case!
      method("execute_#{@command}".to_sym).call(params)
    else
      abort_action(results[1])
    end
  end

  def display_key
    id     = 'id'.center(3)
    date   = 'created_on'.split.first.center(12)
    amount = 'amount'.rjust(14)
    memo   = 'memo'
    puts "#{id}|#{date}|#{amount}| #{memo}"
  end

  # Exp_tup is a hash containing keys 'id', 'amount', 'memo', and 'created_on'
  def display_expense(exp_tup)
    id     = exp_tup['id'].center(3)
    date   = exp_tup['created_on'].split.first.center(12)
    amount = exp_tup['amount'].rjust(14)
    memo   = exp_tup['memo']
    puts "#{id}|#{date}|#{amount}| #{memo}"
  end

  def get_length_of_longest_memo(tuple_array)
    tuple_array.map { |tup| tup['memo'].size }.max
  end

  def display_commands
    puts "Commands:\n"
    ARGLESS_COMMANDS.each { |cmd| puts "#{cmd} #{CMD_INFO[cmd]}" }
    ARGFUL_COMMANDS.each  { |cmd| puts "#{cmd} #{CMD_INFO[cmd]}" }
  end

  def display_expense_list(tup_list, header, with_key: true)
    puts header + "\n\n"
    display_key if with_key
    puts '-' * (33 + get_length_of_longest_memo(tup_list))
    tup_list.each do |exp_tup|
      display_expense(exp_tup)
    end
  end

  def abort_action(failed_field = nil)
    # Runs if an invalid command is given or if a command fails validation.
    puts GREETING unless @command
    puts "Invalid input. Please try again.\n\n"
    if @v.valid_command?(@command)
      puts "Command format:"
      puts "#{@command} #{CMD_INFO[@command]}"
      puts "\n#{ARG_ADVICE[failed_field]}" if failed_field
    else
      display_commands
    end
  end

  def execute_list(_params)
    expenses = @db.query_all
    display_expense_list(expenses, 'All Expenses')
  end

  def execute_add(params)
    @db.add_expense(params)
  end

  def execute_search(params)
    results = @db.search_expenses(params.first)
    if results.values.empty?
      puts '(No results.)'
    else
      display_expense_list(results, 'Search Results')
    end
  end
end

class Validator
  def valid_command?(cmd_str)
    ARGLESS_COMMANDS.include?(cmd_str) or ARGFUL_COMMANDS.include?(cmd_str)
  end

  def valid_date?(date_str)
    date_bits = date_str.split('-').map!(&:to_i)
    return false if date_bits.size != 3 or date_bits.any?(0)

    today = Date.today
    year  = date_bits.first.to_i
    month = date_bits[1].to_i
    day   = date_bits.last.to_i
    given_date = Date.new(year, month, day)
    date_str.match?(DATE_REGX) and given_date <= today
  end

  def amount_within_limits(amt)
    amt > 0.00 and amt <= 9999.99
  end

  def valid_add(params)
    return [false, 'args'] unless [2, 3].include?(params.size)

    amt   = params.first.to_f
    memo  = params[1]
    date  = params.size == 3 ? params.last : nil
    return [false, 'amount'] unless amount_within_limits(amt)
    return [false, 'memo']   if memo.strip.empty?
    return [false, 'date']   if date && !valid_date?(date)

    [true]
  end

  def valid_search(params)
    return [false, 'query'] if params.empty? or params.first.strip.empty?

    [true]
  end
end

class ExpenseData
  def initialize
    @db = PG.connect(dbname: 'expense_tracker') # Connect to database
  end

  def add_expense(args)
    # "args" comes straight from CLI as [amount, memo, <date>]
    p args
    has_date = args.size == 3
    fields = has_date ? '(amount, memo, created_on)'  : '(amount, memo)'
    values = has_date ? "($1, $2, $3)" : "($1, $2)"
    query  = "INSERT INTO expenses #{fields} VALUES #{values};"
    has_date ? @db.exec_params(query, [args[0].to_f, args[1], args[2]]) : @db.exec_params(query, [args[0].to_f, args[1]])
  end

  def query_all
    query = 'SELECT * FROM expenses ORDER BY created_on;'
    @db.exec(query)
  end

  def search_expenses(keyword)
    query = "SELECT * FROM expenses WHERE lower(memo) ILIKE '%' || $1 || '%'"
    @db.exec_params(query, [keyword])
  end
end

CLI.new(ARGV)
